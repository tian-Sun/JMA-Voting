"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchCategoryTrendData: function() { return /* binding */ fetchCategoryTrendData; },\n/* harmony export */   fetchHeatAnalysisData: function() { return /* binding */ fetchHeatAnalysisData; },\n/* harmony export */   fetchMultiDayHeatAnalysis: function() { return /* binding */ fetchMultiDayHeatAnalysis; },\n/* harmony export */   fetchMultiStageData: function() { return /* binding */ fetchMultiStageData; },\n/* harmony export */   fetchVotingDataFromApi: function() { return /* binding */ fetchVotingDataFromApi; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../../../node_modules/process/browser.js\");\n// 支持环境变量配置API地址，默认使用正式接口\nconst API_BASE_URL = process.env.API_BASE_URL || \"https://lite-be.cfanfever.com/api/v1/fanfever\";\n// 榜单配置\nconst VOTING_LISTS = [\n    {\n        id: 1,\n        code: \"AM50\",\n        name: \"Male Artiste of the Year\",\n        category: \"AM50\"\n    },\n    {\n        id: 2,\n        code: \"AM51\",\n        name: \"Female Artiste of the Year\",\n        category: \"AM51\"\n    },\n    {\n        id: 3,\n        code: \"AM52\",\n        name: \"Male Group of the Year\",\n        category: \"AM52\"\n    },\n    {\n        id: 4,\n        code: \"AM53\",\n        name: \"Female Group of the Year\",\n        category: \"AM53\"\n    },\n    {\n        id: 5,\n        code: \"AM54\",\n        name: \"Hottest Trending Rookie - Male\",\n        category: \"AM54\"\n    },\n    {\n        id: 6,\n        code: \"AM55\",\n        name: \"Hottest Trending Rookie - Female\",\n        category: \"AM55\"\n    },\n    {\n        id: 7,\n        code: \"PR70\",\n        name: \"Song of the Year\",\n        category: \"PR70\"\n    },\n    {\n        id: 8,\n        code: \"PR71\",\n        name: \"Album of the Year\",\n        category: \"PR71\"\n    },\n    {\n        id: 9,\n        code: \"PR72\",\n        name: \"Collaboration of the Year\",\n        category: \"PR72\"\n    },\n    {\n        id: 10,\n        code: \"PR73\",\n        name: \"Music Video of the Year\",\n        category: \"PR73\"\n    },\n    {\n        id: 11,\n        code: \"PR74\",\n        name: \"JMA China - Most Influential Manopop Artiste\",\n        category: \"PR74\"\n    }\n];\n// 主要的API调用函数 - 优先使用本地数据，失败时尝试API\nasync function fetchVotingDataFromApi(stage) {\n    console.log(\"开始获取 \".concat(stage, \" 阶段数据...\"));\n    // 首先尝试加载本地数据\n    try {\n        console.log(\"尝试加载本地数据...\");\n        const localData = await fetchLocalData(stage);\n        if (localData) {\n            console.log(\"✅ 使用本地数据成功\");\n            return localData;\n        }\n    } catch (error) {\n        console.log(\"❌ 本地数据加载失败，尝试API调用:\", error);\n    }\n    // 如果本地数据不可用，尝试API调用\n    try {\n        console.log(\"尝试API调用...\");\n        const apiData = await fetchAllVotingDataFromAPI(stage);\n        if (apiData) {\n            return apiData;\n        }\n    } catch (error) {\n        console.log(\"API调用失败:\", error);\n    }\n    // 如果API调用也失败，使用备用数据\n    console.log(\"使用备用数据\");\n    return generateFallbackData(stage);\n}\n// 获取热度分析数据\nasync function fetchHeatAnalysisData(stage) {\n    try {\n        console.log(\"获取热度分析数据...\");\n        // 优先尝试从实时API获取最新数据并生成热度分析\n        try {\n            console.log(\"尝试从API获取实时数据...\");\n            const apiData = await fetchVotingDataFromApi(stage);\n            if (apiData) {\n                console.log(\"使用API数据生成热度分析\");\n                return generateHeatAnalysisFromSnapshot(apiData, stage);\n            }\n        } catch (apiError) {\n            console.log(\"API数据获取失败，尝试本地文件:\", apiError);\n        }\n        // 尝试获取今天的热度分析数据文件\n        const today = new Date().toISOString().split(\"T\")[0];\n        const filename = \"heat_\".concat(today, \"_\").concat(stage, \".json.gz\");\n        const response = await fetch(\"/data/\".concat(filename));\n        if (!response.ok) {\n            throw new Error(\"热度分析文件不存在: \".concat(filename));\n        }\n        // 解压数据\n        const arrayBuffer = await response.arrayBuffer();\n        const compressed = new Uint8Array(arrayBuffer);\n        // 动态导入pako用于解压\n        const pako = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pako_dist_pako_esm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! pako */ \"(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs\"));\n        const decompressed = pako.inflate(compressed, {\n            to: \"string\"\n        });\n        const data = JSON.parse(decompressed);\n        console.log(\"使用本地热度分析文件\");\n        return data;\n    } catch (error) {\n        console.warn(\"所有数据源失败:\", error);\n        // 如果没有热度分析数据，返回null，让前端处理\n        return null;\n    }\n}\n// 从快照数据生成热度分析\nfunction generateHeatAnalysisFromSnapshot(snapshot, stage) {\n    const categoryHeats = [];\n    const darkHorses = [];\n    // 生成分类热度数据\n    Object.entries(snapshot.categories).forEach((param)=>{\n        let [category, artists] = param;\n        const categoryTotalVotes = artists.reduce((sum, artist)=>sum + artist.currentVotes, 0);\n        // 计算Top 10票数\n        const sortedArtists = artists.slice().sort((a, b)=>b.currentVotes - a.currentVotes);\n        const topTenVotes = sortedArtists.slice(0, 10).reduce((sum, artist)=>sum + artist.currentVotes, 0);\n        const topThreeVotes = sortedArtists.slice(0, 3).reduce((sum, artist)=>sum + artist.currentVotes, 0);\n        // 计算竞争激烈度\n        const avgVotes = categoryTotalVotes / artists.length;\n        const variance = artists.reduce((sum, artist)=>sum + Math.pow(artist.currentVotes - avgVotes, 2), 0) / artists.length;\n        let competitionIntensity = 0;\n        if (avgVotes > 0 && variance > 0) {\n            competitionIntensity = Math.min(100, Math.sqrt(variance) / avgVotes * 100);\n            if (isNaN(competitionIntensity) || !isFinite(competitionIntensity)) {\n                competitionIntensity = 0;\n            }\n        }\n        // 找到榜单配置\n        const listConfig = VOTING_LISTS.find((list)=>list.category === category);\n        categoryHeats.push({\n            category,\n            categoryName: (listConfig === null || listConfig === void 0 ? void 0 : listConfig.name) || category,\n            totalVotes: categoryTotalVotes,\n            topTenVotes,\n            topTenRatio: categoryTotalVotes > 0 ? topTenVotes / categoryTotalVotes * 100 : 0,\n            dailyGrowth: 0,\n            averageVotesPerCandidate: avgVotes,\n            topThreeVotes,\n            competitionIntensity,\n            lastUpdated: snapshot.snapshot_date\n        });\n        // 查找潜在黑马（排名较低但票数相对较高的）\n        const potentialDarkHorses = sortedArtists.slice(15, 50) // 排名15-50的候选人\n        .filter((artist)=>artist.currentVotes > avgVotes * 1.2) // 票数超过平均值20%\n        .slice(0, 3) // 最多取3个\n        ;\n        potentialDarkHorses.forEach((artist)=>{\n            const currentRank = artist.rankToday || sortedArtists.findIndex((a)=>a.id === artist.id) + 1;\n            const currentVotes = artist.currentVotes || 0;\n            darkHorses.push({\n                artistId: artist.id,\n                artistName: artist.name,\n                englishName: artist.englishName || \"\",\n                category,\n                categoryName: (listConfig === null || listConfig === void 0 ? void 0 : listConfig.name) || category,\n                currentRank,\n                previousRank: currentRank + Math.floor(Math.random() * 10) + 5,\n                rankChange: Math.floor(Math.random() * 10) + 5,\n                currentVotes,\n                previousVotes: Math.floor((currentVotes || 0) * (0.6 + Math.random() * 0.3)),\n                voteGrowth: 50 + Math.random() * 100,\n                voteGrowthAbsolute: Math.floor((currentVotes || 0) * 0.4),\n                imageUrl: artist.imageUrl || \"\",\n                talentNumber: artist.talentNumber || \"\",\n                nameOfWork: artist.nameOfWork || null\n            });\n        });\n    });\n    return {\n        date: snapshot.snapshot_date,\n        stage,\n        categoryHeats,\n        darkHorses: darkHorses.slice(0, 10),\n        totalVotes: snapshot.total_votes || 0,\n        totalCandidates: Object.values(snapshot.categories).reduce((sum, artists)=>sum + artists.length, 0),\n        collection_time: new Date().toISOString()\n    };\n}\n// 获取多日热度分析数据（用于趋势图）\nasync function fetchMultiDayHeatAnalysis(stage) {\n    let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 7;\n    const results = [];\n    for(let i = 0; i < days; i++){\n        const date = new Date();\n        date.setDate(date.getDate() - i);\n        const dateString = date.toISOString().split(\"T\")[0];\n        try {\n            const filename = \"heat_\".concat(dateString, \"_\").concat(stage, \".json.gz\");\n            const response = await fetch(\"/data/\".concat(filename));\n            if (response.ok) {\n                const arrayBuffer = await response.arrayBuffer();\n                const compressed = new Uint8Array(arrayBuffer);\n                const pako = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pako_dist_pako_esm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! pako */ \"(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs\"));\n                const decompressed = pako.inflate(compressed, {\n                    to: \"string\"\n                });\n                const data = JSON.parse(decompressed);\n                results.push(data);\n            }\n        } catch (error) {\n            console.warn(\"加载 \".concat(dateString, \" 热度数据失败:\"), error);\n        }\n    }\n    return results.sort((a, b)=>a.date.localeCompare(b.date));\n}\n// 获取榜单趋势数据\nasync function fetchCategoryTrendData(stage) {\n    let days = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 7;\n    let multiDayData = await fetchMultiDayHeatAnalysis(stage, days);\n    // 如果完全没有数据，返回空数据\n    if (multiDayData.length < 1) {\n        console.log(\"暂无任何历史数据\");\n        return {\n            dates: [],\n            categories: [],\n            trendsData: {}\n        };\n    }\n    const dates = multiDayData.map((data)=>data.date.slice(5)) // MM-DD格式\n    ;\n    const categories = multiDayData[0].categoryHeats.map((cat)=>cat.category);\n    const trendsData = {};\n    // 为每个分类准备趋势数据\n    categories.forEach((category)=>{\n        const categoryData = multiDayData[0].categoryHeats.find((cat)=>cat.category === category);\n        if (categoryData) {\n            trendsData[category] = {\n                categoryName: categoryData.categoryName,\n                totalVotes: [],\n                dailyGrowth: [],\n                competitionIntensity: [],\n                averageVotes: [],\n                topTenRatio: []\n            };\n        }\n    });\n    // 填充每一天的数据\n    multiDayData.forEach((dayData)=>{\n        dayData.categoryHeats.forEach((cat)=>{\n            if (trendsData[cat.category]) {\n                trendsData[cat.category].totalVotes.push(cat.totalVotes);\n                trendsData[cat.category].dailyGrowth.push(cat.dailyGrowth);\n                trendsData[cat.category].competitionIntensity.push(cat.competitionIntensity || 0);\n                trendsData[cat.category].averageVotes.push(cat.averageVotesPerCandidate);\n                trendsData[cat.category].topTenRatio.push(cat.topTenRatio);\n            }\n        });\n    });\n    return {\n        dates,\n        categories,\n        trendsData\n    };\n}\n// 从本地压缩文件加载数据\nasync function fetchLocalData(stage) {\n    try {\n        console.log(\"\\uD83D\\uDD0D 开始加载本地数据...\");\n        // 首先获取manifest文件，找到最新的可用数据\n        const manifestResponse = await fetch(\"/data/manifest.json\");\n        if (!manifestResponse.ok) {\n            throw new Error(\"无法加载manifest文件\");\n        }\n        const manifest = await manifestResponse.json();\n        console.log(\"\\uD83D\\uDCCB Manifest内容:\", manifest);\n        const availableDates = manifest[stage] || [];\n        console.log(\"\\uD83D\\uDCC5 \".concat(stage, \" 阶段可用日期:\"), availableDates);\n        if (availableDates.length === 0) {\n            throw new Error(\"没有可用的 \".concat(stage, \" 阶段数据\"));\n        }\n        // 使用最新的可用数据\n        const latestDate = availableDates[availableDates.length - 1];\n        const filename = \"\".concat(latestDate, \"_\").concat(stage, \".json.gz\");\n        console.log(\"\\uD83D\\uDCC1 尝试加载数据文件: \".concat(filename));\n        const response = await fetch(\"/data/\".concat(filename));\n        if (!response.ok) {\n            throw new Error(\"本地文件不存在: \".concat(filename));\n        }\n        console.log(\"✅ 文件加载成功，大小: \".concat(response.headers.get(\"content-length\"), \" bytes\"));\n        // 解压数据\n        const arrayBuffer = await response.arrayBuffer();\n        const compressed = new Uint8Array(arrayBuffer);\n        console.log(\"\\uD83D\\uDCE6 压缩数据大小: \".concat(compressed.length, \" bytes\"));\n        // 动态导入pako用于解压\n        const pako = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_pako_dist_pako_esm_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! pako */ \"(app-pages-browser)/./node_modules/pako/dist/pako.esm.mjs\"));\n        const decompressed = pako.inflate(compressed, {\n            to: \"string\"\n        });\n        console.log(\"\\uD83D\\uDCC4 解压后数据大小: \".concat(decompressed.length, \" characters\"));\n        const data = JSON.parse(decompressed);\n        console.log(\"✅ 成功加载数据: \".concat(filename));\n        console.log(\"\\uD83D\\uDCCA 数据概览:\", {\n            snapshot_date: data.snapshot_date,\n            stage: data.stage,\n            total_votes: data.total_votes,\n            categories: Object.keys(data.categories || {}),\n            categoryCount: Object.keys(data.categories || {}).length\n        });\n        return data;\n    } catch (error) {\n        console.error(\"❌ 加载本地数据失败:\", error);\n        return null;\n    }\n}\n// 从API获取所有榜单数据（客户端环境下跳过，避免CORS问题）\nasync function fetchAllVotingDataFromAPI(stage) {\n    console.log(\"⚠️ 客户端环境下跳过API调用，避免CORS问题\");\n    console.log(\"\\uD83D\\uDCDD 请使用手动数据收集命令: npm run collect:\".concat(stage));\n    return null;\n}\n// 获取单个榜单数据\nasync function fetchSingleListData(listId, stage) {\n    try {\n        const listConfig = VOTING_LISTS.find((list)=>list.id === listId);\n        if (!listConfig) {\n            console.warn(\"未找到榜单配置，ID: \".concat(listId));\n            return null;\n        }\n        console.log(\"获取榜单: \".concat(listConfig.name, \" (\").concat(listConfig.code, \")\"));\n        const response = await fetch(\"\".concat(API_BASE_URL, \"/voteResult/\").concat(listId, \"?type=\").concat(stage), {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\"\n            },\n            cache: \"no-cache\",\n            // 添加CORS配置\n            mode: \"cors\"\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP \".concat(response.status, \": \").concat(response.statusText));\n        }\n        const apiData = await response.json();\n        console.log(\"\".concat(listConfig.code, \" 数据获取成功，总票数:\"), apiData.total_votes);\n        return {\n            listConfig,\n            data: apiData\n        };\n    } catch (error) {\n        console.error(\"获取榜单 \".concat(listId, \" 数据失败:\"), error);\n        // 返回 null，避免抛出未捕获异常\n        return null;\n    }\n}\n// 合并所有榜单数据为单一快照\nfunction mergeAllListsData(results, stage) {\n    const now = new Date().toISOString().split(\"T\")[0];\n    let totalVotes = 0;\n    const categories = {};\n    results.forEach((param)=>{\n        let { listConfig, data } = param;\n        totalVotes += data.total_votes || 0;\n        // 转换艺人数据\n        const artists = data.data.map((apiArtist, index)=>({\n                id: \"\".concat(listConfig.category, \"-\").concat(apiArtist.talent_number || index),\n                name: apiArtist.talent.artiste_nominated,\n                englishName: apiArtist.talent.english_name,\n                currentVotes: apiArtist.votes,\n                rankToday: apiArtist.rank,\n                rankDelta: 0,\n                category: listConfig.category,\n                talentNumber: apiArtist.talent_number,\n                imageUrl: apiArtist.talent.image_url,\n                nameOfWork: apiArtist.talent.name_of_work\n            }));\n        categories[listConfig.category] = artists;\n    });\n    return {\n        snapshot_date: now,\n        stage,\n        total_votes: totalVotes,\n        categories\n    };\n}\n// 生成备用数据（如果所有方式都失败）\nfunction generateFallbackData(stage) {\n    console.log(\"生成备用示例数据...\");\n    const now = new Date().toISOString().split(\"T\")[0];\n    const categories = {};\n    let totalVotes = 0;\n    VOTING_LISTS.forEach((listConfig)=>{\n        const artists = [];\n        const listSize = listConfig.code.startsWith(\"AM\") ? 75 : 50 // 艺人榜单75个，作品榜单50个\n        ;\n        for(let i = 1; i <= listSize; i++){\n            const votes = Math.floor(Math.random() * 100000) + 10000;\n            totalVotes += votes;\n            artists.push({\n                id: \"\".concat(listConfig.category, \"-\").concat(i),\n                name: \"\".concat(listConfig.code, \" 候选人 \").concat(i),\n                englishName: \"\".concat(listConfig.code, \" Candidate \").concat(i),\n                currentVotes: votes,\n                rankToday: i,\n                rankDelta: Math.floor(Math.random() * 11) - 5,\n                category: listConfig.category,\n                talentNumber: \"\".concat(listConfig.code.slice(0, 2), \" \").concat(i.toString().padStart(2, \"0\")),\n                imageUrl: \"https://picsum.photos/200/200?random=\".concat(i + listConfig.id * 100),\n                nameOfWork: listConfig.code.startsWith(\"PR\") ? \"作品 \".concat(i) : null\n            });\n        }\n        categories[listConfig.category] = artists;\n    });\n    return {\n        snapshot_date: now,\n        stage,\n        total_votes: totalVotes,\n        categories\n    };\n}\n// 兼容的多阶段数据获取函数\nasync function fetchMultiStageData() {\n    try {\n        const firstStage = await fetchVotingDataFromApi(\"first\");\n        const secondStage = await fetchVotingDataFromApi(\"second\");\n        return {\n            first: firstStage || generateFallbackData(\"first\"),\n            second: secondStage || generateFallbackData(\"second\")\n        };\n    } catch (error) {\n        console.error(\"获取多阶段数据失败:\", error);\n        return {\n            first: generateFallbackData(\"first\"),\n            second: generateFallbackData(\"second\")\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});